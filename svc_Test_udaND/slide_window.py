import numpy as np
import cv2
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

image = mpimg.imread('road.jpg')

# Here is your draw_boxes function from the previous exercise
def draw_boxes(img, bboxes, color=(0, 0, 255), thick=6):
    # Make a copy of the image
    imcopy = np.copy(img)
    # Iterate through the bounding boxes
    for bbox in bboxes:
        # Draw a rectangle given bbox coordinates
        cv2.rectangle(imcopy, bbox[0], bbox[1], color, thick)
    # Return the image copy with boxes drawn
    return imcopy
    
    
# Define a function that takes an image,
# start and stop positions in both x and y, 
# window size (x and y dimensions),  
# and overlap fraction (for both x and y)
def slide_window(img, x_start_stop=[None, None], y_start_stop=[None, None], 
                    xy_window=(64, 64), xy_overlap=(0.5, 0.5)):
    # If x and/or y start/stop positions not defined, set to image size
    if None in x_start_stop or None in y_start_stop:
        x_start_stop = [0, img.shape[1]]
        y_start_stop = [0, img.shape[0]]
    # Compute the span of the region to be searched    
    x_len = x_start_stop[1] - x_start_stop[0]
    y_len = y_start_stop[1] - y_start_stop[0]
    # Compute the number of pixels per step in x/y
    x_step = int(xy_window[0] * (1-xy_overlap[0]))
    y_step = int(xy_window[1] * (1-xy_overlap[1]))
    # Compute the number of windows in x/y
    #x_n_steps = np.linspace(x_start_stop[0], x_start_stop[1], 1+int(x_len/x_step), dtype='int32')
    x_n_steps = list(range(x_start_stop[0], x_start_stop[1],x_step))
    #y_n_steps = np.linspace(y_start_stop[0], y_start_stop[1], 1+int(y_len/y_step), dtype='int32')
    y_n_steps = list(range(y_start_stop[0], y_start_stop[1],y_step))

    # Initialize a list to append window positions to
    print(x_len)
    print(x_step)
    print(x_n_steps)

    print(y_len)
    print(y_step)
    print(y_n_steps)

    window_list = []
    # Loop through finding x and y window positions
    #     Note: you could vectorize this step, but in practice
    #     you'll be considering windows one by one with your
    for yn in range(len(y_n_steps)-1):
        for xn in range(len(x_n_steps)-1):

    #     classifier, so looping makes sense
        # Calculate each window position
            window_list.append(((x_n_steps[xn],y_n_steps[yn]),(x_n_steps[xn]+xy_window[0],y_n_steps[yn]+xy_window[1])))
        # Append window position to list
    # Return the list of windows
    print(window_list)
    return window_list

windows = slide_window(image, x_start_stop=[None, None], y_start_stop=[None, None], 
                    xy_window=(128, 128), xy_overlap=(0.5, 0.5))
                       
window_img = draw_boxes(image, windows, color=(0, 0, 255), thick=6)                    
plt.imshow(window_img)
plt.show()
"""
UDA SOL

# Define a function that takes an image,
# start and stop positions in both x and y, 
# window size (x and y dimensions),  
# and overlap fraction (for both x and y)
def slide_window(img, x_start_stop=[None, None], y_start_stop=[None, None], 
                    xy_window=(64, 64), xy_overlap=(0.5, 0.5)):
    # If x and/or y start/stop positions not defined, set to image size
    if x_start_stop[0] == None:
        x_start_stop[0] = 0
    if x_start_stop[1] == None:
        x_start_stop[1] = img.shape[1]
    if y_start_stop[0] == None:
        y_start_stop[0] = 0
    if y_start_stop[1] == None:
        y_start_stop[1] = img.shape[0]
    # Compute the span of the region to be searched    
    xspan = x_start_stop[1] - x_start_stop[0]
    yspan = y_start_stop[1] - y_start_stop[0]
    # Compute the number of pixels per step in x/y
    nx_pix_per_step = np.int(xy_window[0]*(1 - xy_overlap[0]))
    ny_pix_per_step = np.int(xy_window[1]*(1 - xy_overlap[1]))
    # Compute the number of windows in x/y
    nx_windows = np.int(xspan/nx_pix_per_step) - 1
    ny_windows = np.int(yspan/ny_pix_per_step) - 1
    # Initialize a list to append window positions to
    window_list = []
    # Loop through finding x and y window positions
    # Note: you could vectorize this step, but in practice
    # you'll be considering windows one by one with your
    # classifier, so looping makes sense
    for ys in range(ny_windows):
        for xs in range(nx_windows):
            # Calculate window position
            startx = xs*nx_pix_per_step + x_start_stop[0]
            endx = startx + xy_window[0]
            starty = ys*ny_pix_per_step + y_start_stop[0]
            endy = starty + xy_window[1]
            # Append window position to list
            window_list.append(((startx, starty), (endx, endy)))
    # Return the list of windows
    print(window_list)
    return window_list



[[(0, 0), (67, 72)], [(0, 72), (67, 144)], [(0, 144), (67, 216)], [(0, 216), (67, 288)], [(0, 288), (67, 360)], [(0, 360), (67, 432)], [(0, 432), (67, 504)], [(0, 504), (67, 576)], [(0, 576), (67, 648)], [(0, 648), (67, 720)], [(67, 0), (134, 72)], [(67, 72), (134, 144)], [(67, 144), (134, 216)], [(67, 216), (134, 288)], [(67, 288), (134, 360)], [(67, 360), (134, 432)], [(67, 432), (134, 504)], [(67, 504), (134, 576)], [(67, 576), (134, 648)], [(67, 648), (134, 720)], [(134, 0), (202, 72)], [(134, 72), (202, 144)], [(134, 144), (202, 216)], [(134, 216), (202, 288)], [(134, 288), (202, 360)], [(134, 360), (202, 432)], [(134, 432), (202, 504)], [(134, 504), (202, 576)], [(134, 576), (202, 648)], [(134, 648), (202, 720)], [(202, 0), (269, 72)], [(202, 72), (269, 144)], [(202, 144), (269, 216)], [(202, 216), (269, 288)], [(202, 288), (269, 360)], [(202, 360), (269, 432)], [(202, 432), (269, 504)], [(202, 504), (269, 576)], [(202, 576), (269, 648)], [(202, 648), (269, 720)], [(269, 0), (336, 72)], [(269, 72), (336, 144)], [(269, 144), (336, 216)], [(269, 216), (336, 288)], [(269, 288), (336, 360)], [(269, 360), (336, 432)], [(269, 432), (336, 504)], [(269, 504), (336, 576)], [(269, 576), (336, 648)], [(269, 648), (336, 720)], [(336, 0), (404, 72)], [(336, 72), (404, 144)], [(336, 144), (404, 216)], [(336, 216), (404, 288)], [(336, 288), (404, 360)], [(336, 360), (404, 432)], [(336, 432), (404, 504)], [(336, 504), (404, 576)], [(336, 576), (404, 648)], [(336, 648), (404, 720)], [(404, 0), (471, 72)], [(404, 72), (471, 144)], [(404, 144), (471, 216)], [(404, 216), (471, 288)], [(404, 288), (471, 360)], [(404, 360), (471, 432)], [(404, 432), (471, 504)], [(404, 504), (471, 576)], [(404, 576), (471, 648)], [(404, 648), (471, 720)], [(471, 0), (538, 72)], [(471, 72), (538, 144)], [(471, 144), (538, 216)], [(471, 216), (538, 288)], [(471, 288), (538, 360)], [(471, 360), (538, 432)], [(471, 432), (538, 504)], [(471, 504), (538, 576)], [(471, 576), (538, 648)], [(471, 648), (538, 720)], [(538, 0), (606, 72)], [(538, 72), (606, 144)], [(538, 144), (606, 216)], [(538, 216), (606, 288)], [(538, 288), (606, 360)], [(538, 360), (606, 432)], [(538, 432), (606, 504)], [(538, 504), (606, 576)], [(538, 576), (606, 648)], [(538, 648), (606, 720)], [(606, 0), (673, 72)], [(606, 72), (673, 144)], [(606, 144), (673, 216)], [(606, 216), (673, 288)], [(606, 288), (673, 360)], [(606, 360), (673, 432)], [(606, 432), (673, 504)], [(606, 504), (673, 576)], [(606, 576), (673, 648)], [(606, 648), (673, 720)], [(673, 0), (741, 72)], [(673, 72), (741, 144)], [(673, 144), (741, 216)], [(673, 216), (741, 288)], [(673, 288), (741, 360)], [(673, 360), (741, 432)], [(673, 432), (741, 504)], [(673, 504), (741, 576)], [(673, 576), (741, 648)], [(673, 648), (741, 720)], [(741, 0), (808, 72)], [(741, 72), (808, 144)], [(741, 144), (808, 216)], [(741, 216), (808, 288)], [(741, 288), (808, 360)], [(741, 360), (808, 432)], [(741, 432), (808, 504)], [(741, 504), (808, 576)], [(741, 576), (808, 648)], [(741, 648), (808, 720)], [(808, 0), (875, 72)], [(808, 72), (875, 144)], [(808, 144), (875, 216)], [(808, 216), (875, 288)], [(808, 288), (875, 360)], [(808, 360), (875, 432)], [(808, 432), (875, 504)], [(808, 504), (875, 576)], [(808, 576), (875, 648)], [(808, 648), (875, 720)], [(875, 0), (943, 72)], [(875, 72), (943, 144)], [(875, 144), (943, 216)], [(875, 216), (943, 288)], [(875, 288), (943, 360)], [(875, 360), (943, 432)], [(875, 432), (943, 504)], [(875, 504), (943, 576)], [(875, 576), (943, 648)], [(875, 648), (943, 720)], [(943, 0), (1010, 72)], [(943, 72), (1010, 144)], [(943, 144), (1010, 216)], [(943, 216), (1010, 288)], [(943, 288), (1010, 360)], [(943, 360), (1010, 432)], [(943, 432), (1010, 504)], [(943, 504), (1010, 576)], [(943, 576), (1010, 648)], [(943, 648), (1010, 720)], [(1010, 0), (1077, 72)], [(1010, 72), (1077, 144)], [(1010, 144), (1077, 216)], [(1010, 216), (1077, 288)], [(1010, 288), (1077, 360)], [(1010, 360), (1077, 432)], [(1010, 432), (1077, 504)], [(1010, 504), (1077, 576)], [(1010, 576), (1077, 648)], [(1010, 648), (1077, 720)], [(1077, 0), (1145, 72)], [(1077, 72), (1145, 144)], [(1077, 144), (1145, 216)], [(1077, 216), (1145, 288)], [(1077, 288), (1145, 360)], [(1077, 360), (1145, 432)], [(1077, 432), (1145, 504)], [(1077, 504), (1145, 576)], [(1077, 576), (1145, 648)], [(1077, 648), (1145, 720)], [(1145, 0), (1212, 72)], [(1145, 72), (1212, 144)], [(1145, 144), (1212, 216)], [(1145, 216), (1212, 288)], [(1145, 288), (1212, 360)], [(1145, 360), (1212, 432)], [(1145, 432), (1212, 504)], [(1145, 504), (1212, 576)], [(1145, 576), (1212, 648)], [(1145, 648), (1212, 720)], [(1212, 0), (1280, 72)], [(1212, 72), (1280, 144)], [(1212, 144), (1280, 216)], [(1212, 216), (1280, 288)], [(1212, 288), (1280, 360)], [(1212, 360), (1280, 432)], [(1212, 432), (1280, 504)], [(1212, 504), (1280, 576)], [(1212, 576), (1280, 648)], [(1212, 648), (1280, 720)]]
[((0, 0), (128, 128)),
 ((64, 0), (192, 128)),
 ((128, 0), (256, 128)),
 ((192, 0), (320, 128)),
 ((256, 0), (384, 128)),
 ((320, 0), (448, 128)),
 ((384, 0), (512, 128)),
 ((448, 0), (576, 128)),
 ((512, 0), (640, 128)),
 ((576, 0), (704, 128)),
 ((640, 0), (768, 128)),
 ((704, 0), (832, 128)),
 ((768, 0), (896, 128)),
 ((832, 0), (960, 128)),
 ((896, 0), (1024, 128)),
 ((960, 0), (1088, 128)),
 ((1024, 0), (1152, 128)),
 ((1088, 0), (1216, 128)),
 ((1152, 0), (1280, 128)),
 ((0, 64), (128, 192)), ((64, 64), (192, 192)), ((128, 64), (256, 192)), ((192, 64), (320, 192)), ((256, 64), (384, 192)), ((320, 64), (448, 192)), ((384, 64), (512, 192)), ((448, 64), (576, 192)), ((512, 64), (640, 192)), ((576, 64), (704, 192)), ((640, 64), (768, 192)), ((704, 64), (832, 192)), ((768, 64), (896, 192)), ((832, 64), (960, 192)), ((896, 64), (1024, 192)), ((960, 64), (1088, 192)), ((1024, 64), (1152, 192)), ((1088, 64), (1216, 192)), ((1152, 64), (1280, 192)), ((0, 128), (128, 256)), ((64, 128), (192, 256)), ((128, 128), (256, 256)), ((192, 128), (320, 256)), ((256, 128), (384, 256)), ((320, 128), (448, 256)), ((384, 128), (512, 256)), ((448, 128), (576, 256)), ((512, 128), (640, 256)), ((576, 128), (704, 256)), ((640, 128), (768, 256)), ((704, 128), (832, 256)), ((768, 128), (896, 256)), ((832, 128), (960, 256)), ((896, 128), (1024, 256)), ((960, 128), (1088, 256)), ((1024, 128), (1152, 256)), ((1088, 128), (1216, 256)), ((1152, 128), (1280, 256)), ((0, 192), (128, 320)), ((64, 192), (192, 320)), ((128, 192), (256, 320)), ((192, 192), (320, 320)), ((256, 192), (384, 320)), ((320, 192), (448, 320)), ((384, 192), (512, 320)), ((448, 192), (576, 320)), ((512, 192), (640, 320)), ((576, 192), (704, 320)), ((640, 192), (768, 320)), ((704, 192), (832, 320)), ((768, 192), (896, 320)), ((832, 192), (960, 320)), ((896, 192), (1024, 320)), ((960, 192), (1088, 320)), ((1024, 192), (1152, 320)), ((1088, 192), (1216, 320)), ((1152, 192), (1280, 320)), ((0, 256), (128, 384)), ((64, 256), (192, 384)), ((128, 256), (256, 384)), ((192, 256), (320, 384)), ((256, 256), (384, 384)), ((320, 256), (448, 384)), ((384, 256), (512, 384)), ((448, 256), (576, 384)), ((512, 256), (640, 384)), ((576, 256), (704, 384)), ((640, 256), (768, 384)), ((704, 256), (832, 384)), ((768, 256), (896, 384)), ((832, 256), (960, 384)), ((896, 256), (1024, 384)), ((960, 256), (1088, 384)), ((1024, 256), (1152, 384)), ((1088, 256), (1216, 384)), ((1152, 256), (1280, 384)), ((0, 320), (128, 448)), ((64, 320), (192, 448)), ((128, 320), (256, 448)), ((192, 320), (320, 448)), ((256, 320), (384, 448)), ((320, 320), (448, 448)), ((384, 320), (512, 448)), ((448, 320), (576, 448)), ((512, 320), (640, 448)), ((576, 320), (704, 448)), ((640, 320), (768, 448)), ((704, 320), (832, 448)), ((768, 320), (896, 448)), ((832, 320), (960, 448)), ((896, 320), (1024, 448)), ((960, 320), (1088, 448)), ((1024, 320), (1152, 448)), ((1088, 320), (1216, 448)), ((1152, 320), (1280, 448)), ((0, 384), (128, 512)), ((64, 384), (192, 512)), ((128, 384), (256, 512)), ((192, 384), (320, 512)), ((256, 384), (384, 512)), ((320, 384), (448, 512)), ((384, 384), (512, 512)), ((448, 384), (576, 512)), ((512, 384), (640, 512)), ((576, 384), (704, 512)), ((640, 384), (768, 512)), ((704, 384), (832, 512)), ((768, 384), (896, 512)), ((832, 384), (960, 512)), ((896, 384), (1024, 512)), ((960, 384), (1088, 512)), ((1024, 384), (1152, 512)), ((1088, 384), (1216, 512)), ((1152, 384), (1280, 512)), ((0, 448), (128, 576)), ((64, 448), (192, 576)), ((128, 448), (256, 576)), ((192, 448), (320, 576)), ((256, 448), (384, 576)), ((320, 448), (448, 576)), ((384, 448), (512, 576)), ((448, 448), (576, 576)), ((512, 448), (640, 576)), ((576, 448), (704, 576)), ((640, 448), (768, 576)), ((704, 448), (832, 576)), ((768, 448), (896, 576)), ((832, 448), (960, 576)), ((896, 448), (1024, 576)), ((960, 448), (1088, 576)), ((1024, 448), (1152, 576)), ((1088, 448), (1216, 576)), ((1152, 448), (1280, 576)), ((0, 512), (128, 640)), ((64, 512), (192, 640)), ((128, 512), (256, 640)), ((192, 512), (320, 640)), ((256, 512), (384, 640)), ((320, 512), (448, 640)), ((384, 512), (512, 640)), ((448, 512), (576, 640)), ((512, 512), (640, 640)), ((576, 512), (704, 640)), ((640, 512), (768, 640)), ((704, 512), (832, 640)), ((768, 512), (896, 640)), ((832, 512), (960, 640)), ((896, 512), (1024, 640)), ((960, 512), (1088, 640)), ((1024, 512), (1152, 640)), ((1088, 512), (1216, 640)), ((1152, 512), (1280, 640)), ((0, 576), (128, 704)), ((64, 576), (192, 704)), ((128, 576), (256, 704)), ((192, 576), (320, 704)), ((256, 576), (384, 704)), ((320, 576), (448, 704)), ((384, 576), (512, 704)), ((448, 576), (576, 704)), ((512, 576), (640, 704)), ((576, 576), (704, 704)), ((640, 576), (768, 704)), ((704, 576), (832, 704)), ((768, 576), (896, 704)), ((832, 576), (960, 704)), ((896, 576), (1024, 704)), ((960, 576), (1088, 704)), ((1024, 576), (1152, 704)), ((1088, 576), (1216, 704)), ((1152, 576), (1280, 704))]



"""